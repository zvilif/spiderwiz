/**
 * Core classes of the <em>Spiderwiz</em> framework.
 * <p>
 * This package contains all the building blocks that you need in order to build a fully functional Spiderwiz application. You will
 * find here a short description of the classes and hints how to use them. For a thorough description look at the
 * documentation of each class, and for a detail usage instructions look at our tutorials.
 * <p>
 * Your starting point is class {@link org.spiderwiz.core.Main Main}. Extend it with your own class, in which you will define the
 * objects that you produce or consume, register object handlers and provide custom initialization code.
 * <p>
 * Next is to define your <em>data objects</em> library. A <em>Data Object</em> is a class that extends
 * {@link org.spiderwiz.core.DataObject DataObject} and adds properties for the specific object type. If you are a producer of that
 * object type, create the object (with {@link org.spiderwiz.core.Main#createTopLevelObject(java.lang.Class, java.lang.String) 
 * Main.createTopLevelObject()} or {@link org.spiderwiz.core.DataObject#createChild(java.lang.Class, java.lang.String) 
 * DataObject.createChild()}) and set its properties, or edit the properties of an existing object, then
 * {@link org.spiderwiz.core.DataObject#commit() commit} the object. If you are a consumer of that object type, implement event
 * handling methods of the class.
 * <p>
 * For many applications this is all you need in order to achieve your tasks. Other classes help you in advanced scenarios:
 * <p>
 * {@link org.spiderwiz.core.QueryObject QueryObject} is a subclass of {@link org.spiderwiz.core.DataObject DataObject} designed for
 * round-trip queries. It has methods for posting a query by a sender and methods for replying to queries by receivers.
 * <p>
 * {@link org.spiderwiz.core.Resetter Resetter} can be used in case of communication problems, when a consumer detects that an object
 * stream has gone out of sequence. In that case it sends an object reset request to the producer, which can use the provided
 * {@code Resetter} for moderated streaming of reset data.
 * <p>
 * {@link org.spiderwiz.core.Filter Filter} is a base class for a filtering object that you need to use with
 * {@link org.spiderwiz.core.DataObject#getFilteredChildren(org.spiderwiz.core.Filter) DataObject.getFilteredChildren()}.
 * An extension of it is provided - {@link org.spiderwiz.core.CatchAllFilter CatchAllFilter} - that catches all data objects of a
 * specific type.
 * <p>
 * The current Spiderwiz version comes with implementation of three communication protocols - TCP/IP sockets, WebSockets and local file
 * input-output (the latter is used mainly for offline debugging). You can extend the framework by writing your own communication
 * plugins. For that purpose, we provide two base classes that you can extend. {@link org.spiderwiz.core.Channel Channel} is the base
 * class for a communication channel (like a TCP/IP socket, or a WebSocket session).
 * {@link org.spiderwiz.core.ServerChannel ServerChannel} is the base class for implementations of server endpoints, which accept
 * session requests from clients and establish appropriate channels.
 * <p>
 * The framework also provides means for importing data from and exporting it to general services that are outside of the framework.
 * {@link org.spiderwiz.core.ImportHandler ImportHandler} is used for that purpose. Its default implementation reads general
 * text lines from the specified communication channel and passes it over to <em>data objects</em> for parsing and handling, as well as
 * writing text lines generated by the objects to the specified channel. You can extend this class to provide custom import/export
 * mechanism.
 * 
 */
package org.spiderwiz.core;