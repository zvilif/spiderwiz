<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>Spiderwiz Configuration</title>
        <link href="../../../../stylesheet.css" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="mystyle.css" type="text/css"/>

    </head>

    <body>
        <div class="header">
            <h1 class="title">Spiderwiz Configuration</h1>
        </div>
        <div class="contentContainer">
            <div class="description">
                <div class="block"><h2>How to Configure a Spiderwiz Application</h2>
                    <p>
                        Every Spiderwiz-based application needs a <b>configuration file</b> in order to run and perform its tasks. The file
                        must reside in the
                        <a href="../../../../org/spiderwiz/core/Main.html#getRootFolder--">application's root folder</a> and its name
                        shall be provided in its <a href="../../../../org/spiderwiz/core/Main.html#Main-java.lang.String-java.lang.String-java.lang.String-java.lang.String-">
                            <code>Main</code> class constructor</a>.
                    </p>
                    <p>
                        An application configuration file is a text file that contains mapping of property names (the keys) to property values.
                        Each line in the file has the format:
                    <p style="padding-left:2em;">
                        <code>[<em>property name</em>]<em>property value</em></code>
                    </p>
                    <p>
                        For instance, a configuration file may look something like this:
                    </p>
                    <pre>
    [application uuid]ff8197de-3f44-4d2e-b224-e49fc49b7e6a
    [application name]My First Spiderwiz Application
    [log folder]Logs
    [backup folder]Backup
    [history file]history.dat
    [producer-1]ip=localhost;port=22220
    [producer-3]websocket=localhost:8080/TestWebsockets
    [producer server-1]port=23333
    [hub mode]yes
    [mail system]smtp;server=smtp.gmail.com;user=zvilif@spiderwiz.org;pwd=dumptramp;port=465;ssl=true
    [from address]First Application Alerts&lt;1stapp.alert@spiderwiz.org&gt;
    [to email]Spiderwiz Administrator&lt;spiderwiz.admin@gmail.com&gt;
    [to exception email]Spiderwiz Programmer&lt;spiderwiz.geek@gmail.com&gt;
    [obsolescence time in hours]1
                    </pre>
                    <a id="ParameterList"></a>
                    <p>
                        Some properties require a <em>parameter list</em>, i.e. a list of pairs <em>key</em>=<em>value</em>
                        concatenated by a semicolon (;). (The assignment is optional - keywords that are not assigned to values are valid).
                        In the above example:
                    </p>
                    <pre>
    [mail system]smtp;server=smtp.gmail.com;user=zvilif@spiderwiz.org;pwd=dumptramp;port=465;ssl=true
                    </pre>
                    <p>
                        Properties can be <em>predefined</em> or <em>custom</em>. Predefined properties are used by Spiderwiz framework
                        for the configuration of its tasks. Custom properties are defined by the user and can be programmatically fetched
                        by user code that looks like:
                    </p>
                    <pre>
    String myCustomProperty = Main.getConfig().getProperty("my custom property");
                    </pre>
                    <p>
                        Predefined and custom properties can be mixed in the same configuration file.
                    </p>
                    <p>
                        The following is a detailed description of all Spiderwiz predefined properties and their roles. There is also
                        a detailed description of the parameters for every property that requires a parameter list.
                    </p>
                </div>
                <div class="overviewSummary">
                    <div class="block"><h2>Spiderwiz Configuration</h2></div>
                    <table class="memberSummary">
                        <caption><span>Configuration Properties</span><span class="tabEnd">&nbsp;</span></caption>
                        <colgroup>
                            <col>
                            <col>
                        </colgroup>
                        <tbody>
                            <tr>
                                <th class="colFirst">Property</th>
                                <th class="colLast">Value Description</th>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>application uuid</code></td>
                                <td class="colLast">
                                    Specifies the application UUID. The value is&nbsp;
                                    automatically generated and appended to the configuration file the first time the application runs. Normally you should never 
                                    touch this value by hand. However if you move the application to another disk 
                                    location and you want to keep its full context (configuration, network 
                                    connection identifiers, session history etc.) you
                                    can move the configuration file as is, including this property. Do not keep the 
                                    same UUID in more than one application configuration, as this would mess the 
                                    entire system up.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>application name</code></td>
                                <td class="colLast">
                                    Sets the application name. This value overrides the value given to
                                    <a href="../../../../org/spiderwiz/core/Main.html#Main-java.lang.String-java.lang.String-java.lang.String-java.lang.String-">
                                        <code>Main</code> class constructor</a>. If the property is not defined, the programmed name is used.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="LogFolder"></a><code>log folder</code></td>
                                <td class="colLast">
                                    Absolute or relative path of the root folder of the application log file system. A relative path is relative to the application's root folder. 
                                    If the property is not defined the default <code>"logs"</code> path is used.  See
                                    <a href="logging.html">Spiderwiz Logging System</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>backup folder</code></td>
                                <td class="colLast">Absolute or relative path of the root folder of 
                                    the backup system for
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#Lossless">
                                        lossless
                                    </a> delivery.
                                    A relative path is relative to the application&#39;s root folder. If lossless 
                                    delivery is used and the property is not defined the default <code>"backup"</code> path is used.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>archive folder</code></td>
                                <td class="colLast">Absolute or relative path of the root folder of the
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#getArchivePath--">
                                        data object archive</a>.
                                    A relative path is relative to the application&#39;s root folder. If archiving is used and the property is not defined the default <code>"archive"</code> path is used.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>history file</code></td>
                                <td class="colLast">Absolute or relative pathname of the file that saves network 
                                    information (applications, connections etc.) to carry between sessions of this 
                                    application. A relative path is relative to the application&#39;s root folder. The 
                                    default pathname is <code>history.dat</code> under the root folder.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>producer-<em>n</em></code></td>
                                <td class="colLast">Defines a  network client connection when the application connects as a <em>producer</em>. Up to 99 connections may be configured, when <em>n</em> is a number from 1 to 99 (in any order, skipping permitted). 
                                    For parameters and values used in this entry see <a href="#ClientConnection">Network Client Connection Configuration</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>consumer-<em>n</em></code></td>
                                <td class="colLast">Defines a  network client connection when the application connects as a <em>
                                        consumer</em>. Up to 99 connections may be configured, when <em>n</em> is a number from 1 to 99 (in any order, skipping permitted). 
                                    For parameters and values used in this entry see <a href="#ClientConnection">Network Client Connection Configuration</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>producer server&#8209;<em>n</em></code></td>
                                <td class="colLast">Defines a  network connection server when the application 
                                    acts as a <i>producer</i> to incoming connections. Up to 99 producer servers may be configured, when <em>n</em> is a number from 1 to 99 (in any order, skipping permitted). 
                                    For parameters and values used in this entry see <a href="#ServerConnection">Network  Server Configuration</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>consumer server&#8209;<em>n</em></code></td>
                                <td class="colLast">Defines a  network connection server when the application 
                                    acts as a <i>consumer</i> to incoming connections. Up to 99 consumer servers may be configured, when <em>n</em> is a number from 1 to 99 (in any order, skipping permitted). 
                                    For parameters and values used in this entry see <a href="#ServerConnection">Network  Server Configuration</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>import-<em>n</em></code></td>
                                <td class="colLast">Defines an import  network connection. Up to 99 import connections may be configured, when <em>n</em> is a number from 1 to 99 (in any order, skipping permitted). 
                                    For parameters and values used in this entry see <a href="#ImportConnection">Import Connection Configuration</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="logInput"></a>
                                    <code>loginput</code></td>
                                <td class="colLast">Specifies logging options for lines arriving over network connections. The value can be any of the following:
                                    <div class="indent"><code>no</code>  (or anything that starts with it) - no logging of input lines (the default).<br>
                                        <code>raw</code> - input lines are logged as they are, i.e. with the objects compressed.<br>
                                        <code>full</code> - input lines are expanded to show uncompressed objects.<br>
                                        <code>verbose</code> - every line is logged twice - raw and full. </div> 
                                    Note that logging can be configured individually for specific connections,
                                    overriding the general property described here.
                                    See <a href="#loginputParam">Client Configuration</a> and
                                    <a href="#ServerConnection">Server Configuration</a> below.
                                    For a detailed description of the framework's logging system see
                                    <a href="logging.html">Spiderwiz Logging System</a>.
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="logOutput"></a>
                                    <code>logoutput</code></td>
                                <td class="colLast">Specifies logging options for lines output to network connections. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no logging of output lines (the default).<br>
                                        <code>raw</code> - output lines are logged as they are, i.e. with the objects <a href="compression.html">compressed</a>.<br>
                                        <code>full</code> - output lines are logged before compression to show uncompressed objects.<br>
                                        <code>verbose</code> - every line is logged twice - raw and full. </div>
                                    Note that logging can be configured individually for specific connections, overriding the general property described here. See <a href="#logoutputParam">Client Configuration</a> and <a href="#loginputServerParam">Server Configuration</a> below. For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a id="reconnection"></a><code>reconnection seconds</code></td>
                                <td class="colLast">Specifies how many seconds a connection client shall wait after 
                                    a failed connection attempt before retrying. A negative value means reconnection 
                                    shall not be attempted. The default value is 60 seconds.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="DisconnectionAlert"></a><code>disconnection alert minutes</code></td>
                                <td class="colLast">Specifies how many minutes a communication handler (producer, 
                                    consumer or import) shall wait for a reconnection after detecting a client 
                                    disconnection before sending an alert mail. Used in conjunction with the <code>alert</code> parameter 
                                    of the <a href="#ClientConnection">network client configuration</a>. If the 
                                    value is negative disconnection alerts are never sent. The default is 3 minutes.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>idle alert minutes</code></td>
                                <td class="colLast">Specifies how many minutes a communication handler (producer, 
                                    consumer or import) shall wait for traffic after detecting an idle state before 
                                    sending an alert mail. Used in conjunction with the <code>alert</code> parameter 
                                    of the <a href="#ClientConnection">network client configuration</a>. If the 
                                    value is negative idle alerts are never sent. The default is 3 minutes.
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>stream rate</code></td>
                                <td class="colLast">Specifies the number of elements per minute to send when <i>data 
                                        objects</i> are streamed. Object streaming takes place 1. during
                                    <a href="../../../../org/spiderwiz/core/Resetter.html">
                                        Data Object Resetting</a>, 2. during retransmission of
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#Lossless">
                                        Lossless Objects</a>. The default value for this property is 
                                    30,000 items per minute.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>hub mode</code></td>
                                <td class="colLast">Set this property to any value that does not start with &quot;no&quot; 
                                    (case insensitive) to indicate that the application runs as a <b><i>hub</i></b>, 
                                    i.e. it requests <i>data objects</i> that it does not consume in order to route 
                                    them down the stream to applications that do consume them.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>pass through</code></td>
                                <td class="colLast">Set this property to any value that does not start with &quot;no&quot; 
                                    (case insensitive) to indicate that the application shall not keep in memory any
                                    <i>data object</i> 
                                    it consumes even if it is not defined
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#isDisposable--">
                                        disposable</a>.
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>start of day</code></td>
                                <td class="colLast">Specifies the hour of the day that the application executes its
                                    <a href="../../../../org/spiderwiz/core/Main.html#runDailyTask--">
                                        daily task</a> in the format <code>hh:mm</code>.
                                    The default value is <code>04:00</code>
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>obsolescence hours</code></td>
                                <td class="colLast">Specifies the number of hours a disconnected application is 
                                    considered alive before it becomes obsolete. This is relevant for 1. remembering 
                                    a target application for delivery of
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#Lossless">
                                        Lossless Objects</a>, 2. <a href="http://www.spideradmin.com">SpiderAdmin</a>. 
                                    The default value for this property is 24 hours.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a id="mailsystem"></a><code>mail system</code></td>
                                <td class="colLast">Defines the mail system to use for sending notifications and 
                                    alerts. For parameters and values used in this entry see
                                    <a href="#MailSystem">Mail System Configuration</a>. If the property is not defined mails will not be sent by the 
                                    configured application. However the application can still delegate mail sending 
                                    to another application that does have access to a mail system. See
                                    <a href="../../../../org/spiderwiz/core/Main.ObjectCodes.html#EventReport">
                                        Main.ObjectCodes.EventReport</a>.
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>from address</code></td>
                                <td class="colLast">Specifies the sender address to use for sending notification and 
                                    alert mails. The address format depends on the defined mail system.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>to email</code></td>
                                <td class="colLast">Specifies the address (or addresses) to use for sending 
                                    notification and alert (excluding code exception alerts) mails to. The address 
                                    format depends on the defined mail system.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>cc email</code></td>
                                <td class="colLast">Specifies the address (or addresses) to use for sending 
                                    notification and alert (excluding code exception alerts) carbon copies to. The address 
                                    format depends on the defined mail system.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>to exception email</code></td>
                                <td class="colLast">Specifies the address (or addresses) to use for sending 
                                    code exception alerts to. The address 
                                    format depends on the defined mail system.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>cc exception email</code></td>
                                <td class="colLast">Specifies the address (or addresses) to use for sending 
                                    code exception alert carbon copies to. The address 
                                    format depends on the defined mail system. If not defined then CCs will not be 
                                    sent.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>exception alert rate</code></td>
                                <td class="colLast">Specifies the rate in minutes that non-critical code exception 
                                    events should generate alert mails (see
                                    <a href="../../../../org/spiderwiz/core/Main.html#sendExceptionMail-java.lang.Throwable-java.lang.String-java.lang.String-boolean-">
                                        Main.sendExceptionMail()</a>).
                                    A negative value makes every exception critical. The default value is 60 
                                    minutes.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>minimum disk space in gb</code></td>
                                <td class="colLast">Specifies the minimum free disk space, in gigabytes, that if the 
                                    system running the application runs under, then the application sends a 
                                    notification mail to the address specified by the <code>to email</code> property (or 
                                    by <a href="../Main.ObjectCodes.html#EventReport">delegation</a>). Do not 
                                    specify this property if such notification is not required.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="SpiderAdmin"></a><code>spideradmin</code></td>
                                <td class="colLast">Implies that this application shall  connect to
                                    <a href="http://www.spideradmin.com">SpiderAdmin</a> with the specified
                                    <em>user token</em>. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>deploy folder</code> </td>
                                <td class="colLast">Specifies the folder to which <a href="http://www.spideradmin.com">SpiderAdmin</a>
                                    copies deployment files for this application. The default is <code>Deploy</code> under the
                                    application's root folder.
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>restart command</code></td>
                                <td class="colLast">Specifies the command that <a href="http://www.spideradmin.com">SpiderAdmin</a> needs to use in order to restart the application, as a comma separated list of arguments to use when instantiating <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ProcessBuilder.html">ProcessBuilder</a>.
                                    The default value is <code>&quot;cmd,/c,restart.bat&quot;</code>, i.e. The Windows arguments for running &quot;restart.bat&quot; in the application's root folder. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>deploy command</code></td>
                                <td class="colLast">Specifies the command that <a href="http://www.spideradmin.com">SpiderAdmin</a>
                                    needs to use in order to deploy the application, as a comma separated list of arguments to use
                                    when instantiating
                                    <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ProcessBuilder.html">
                                        ProcessBuilder</a>. To this list, SpiderAdmin will add the name of the deployment file as
                                        supplied by its user,
                                        which is supposed to be a parameter in the batch file that is activated by this command.
                                        The default value is <code>&quot;cmd,/c,deploy.bat&quot;</code>, i.e. The Windows arguments for
                                        running &quot;deploy.bat&quot; in the application's root folder. </td>
                            </tr>
                        </tbody></table>
                    <div class="block">
                        <p>&nbsp;</p>
                            <p><a id="ClientConnection"></a>Configuration of network client connections, defined by
                            <code>producer&#8209;<em>n</em></code> 
                            or <code>consumer&#8209;<em>n</em></code> properties, requires a 
                            <a href="#ParameterList">parameter list</a> as defined in the following table. There are two
                            types of parameters. Those of the first type define the transport mechanism. These include
                            <code>class</code>, <code>ip</code>, <code>port</code>, <code>infile</code>,
                            <code>outfile</code> and <code>websocket</code>. The other parameters assign general features
                            to the defined connection and pertain to every transport.</p>
                        <p>With respect to the transport mechanism, this can be custom, implemented as a plugin,
                            or predefined. The <code>class</code> parameter defines a custom plugin, which may use custom
                            parameters in addition to the parameters described in the table. If the <code>class</code>
                            parameter is not used then the other parameters mentioned above determine a predefined
                            transport as described in the table.</p>
                        <p><a id="ProduceConsume"></a>As mentioned, a network connection needs to be configured as either a <em>producer</em> or a <em>consumer</em>. This is just for the sake of convenience and does not limit the data flow in any way. An application may send <em>data objects</em> over a connection defined as <em>producer</em>, and may receive <em>data objects</em> through a connection defined as <em>consumer</em>. However the identification of a connection between two applications as mainly producing or mainly consuming helps in having a clearer bird eye view of the network topology. </p>
                    </div>
                    <table class="memberSummary">
                        <caption>
                            <span>Network Client Connection Configuration</span>
                        </caption>
                        <tbody><tr>
                                <th class="colFirst">Parameter</th>
                                <th class="colLast">Value Description</th>
                            </tr>
                            <tr>
                                <td class="colFirst">
                                    <code>class</code></td>
                                <td class="colLast">Fully qualified class name of a custom connection plugin.</td>
                            </tr>
                            <tr>
                                <td class="colFirst" style="height: 42px"><code>ip</code></td>
                                <td class="colLast" style="height: 42px">The IP address or host name of the target server. The use of both
                                    <code>ip</code> and <code>port</code> properties defines a
                                    <a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html">TCP/IP 
                                        socket</a> connection.</td>
                            </tr>
                            <tr>
                                <td class="colFirst">
                                    <code>port</code>
                                </td>
                                <td class="colLast">Port number of the target server. The use of  both
                                    <code>ip</code> and <code>port</code> properties defines a
                                    <a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html">TCP/IP 
                                        socket</a> connection.</td>
                            </tr>
                            <tr>
                                <td class="colFirst">
                                    <code>infile</code></td>
                                <td class="colLast">Input file pathname of a <i>file channel</i>, when the 
                                    connection is configured to read from and write to disk files. Usually when you 
                                    use this property you would also use <code>outfile</code>. This is used mostly for 
                                    debugging, when you would use the output of the <code>outfile</code> parameter, 
                                    or logs of a previous application 
                                    session, to extract input for offline debugging.</td>
                            </tr>
                            <tr>
                                <td class="colFirst">
                                    <code>outfile</code></td>
                                <td class="colLast">Output file pathname of a <i>file channel</i>, when the 
                                    connection is configured to read from and write to disk files. Usually when you 
                                    use this property you would also use <code>infile</code>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst">
                                    <code>websocket</code></td>
                                <td class="colLast">Defines 
                                    a WebSocket client. The value specifies the protocol and URI of the server to 
                                    connect to in the formats <code>uri</code>, <code>ws:uri</code> or
                                    <code>wss:uri</code>. The URI is the server address followed by a slash (/) and the context path to 
                                    connect to. The protocol can be <code>ws</code> or <code>wss</code>, or it
                                    can be omitted in which case <code>ws</code> 
                                    is used. For example: <code>ws:spideradmin.com/admin</code>.
                                    <div class="spaceit">Note that the 
                                        server context path shall be the root path of the server application, as this is 
                                        the path used by Spiderwiz WebSocket server implementation to form the server&#39;s 
                                        WebSocket path.</div></td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a id="CompressionConfig"></a><code>compress</code></td>
                                <td class="colLast">If used, specifies how output lines sent over this channel shall  be compressed. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no compression (the default for disk file input/output).<br>
                                        <code>zip</code> - physical compression using <em>GZIP</em>. <br>
                                        <code>logical</code> - object-based compression. <br>
                                        <code>full</code> - both physical and logical compression (the default for all communication types except disk file input/output). </div>
                                    <div class="spaceit">For a full explanation of the compression options see <a href="compression.html">Spiderwiz Data Compression</a>. </div>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>alert</code></td>
                                <td class="colLast">If used, instructs the framework to
                                    <a href="../../../../org/spiderwiz/core/Main.html#sendNotificationMail-java.lang.String-java.lang.String-org.spiderwiz.zutils.ZDate-boolean-">
                                        send an alert message</a>
                                    when the connection
                                    drops or becomes idle for a specific amount of time (as specified by configuration
                                    properties <a href="#DisconnectionAlert">described above</a>). The value of this
                                    parameter determines the entity responsible for detecting the event and alerting.
                                    The options are:
                                    <div class="indent">
                                        <code>client</code> - the client side of a client-server connection.<br>
                                        <code>server</code> - the server side of a client-server connection.<br>
                                        <code>both</code> - both sides would send an alert message when they detect a
                                        failure.
                                    </div>
                                    If the parameter is not used failure alerts will not be sent.
                            </tr>
                            <tr>
                                <td class="colFirst"><a id="loginputParam"></a><code>loginput</code></td>
                                <td class="colLast">If used, overrides the general <a href="#logInput"><code>loginput</code> property</a> to specify channel-specific logging options for input lines. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no logging of input lines.<br>
                                        <code>raw</code> - input lines are logged as they are, i.e. with the objects compressed.<br>
                                        <code>full</code> - input lines are expanded to show uncompressed objects.<br>
                                        <code>verbose</code> - every line is logged twice - raw and full. </div>
                                    For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="logoutputParam"></a><code>logoutput</code></td>
                                <td class="colLast">If used, overrides the general <a href="#logOutput"><code>logoutput</code> property</a> to specify channel-specific logging options for output lines. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no logging of output lines.<br>
                                        <code>raw</code> - output lines are logged as they are, i.e. with the objects compressed.<br>
                                        <code>full</code> - output lines are logged before compression to show uncompressed objects.<br>
                                        <code>verbose</code> - every line is logged twice - raw and full. </div>
                                    For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                              <td class="colFirst"><code>flushlogs</code></td>
                              <td class="colLast">If specified (no assignment is needed), indicates that the file that logs the activity on this channel shall be flushed on each transaction. Very useful for debugging, but should be used with care since it slows  performance down dramatically.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="UserID"></a><code>user</code></td>
                                <td class="colLast">
                                    Attaches the specified user name to the connection. The value is conveyed to the connected server and is used by it in methods such as
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#filterDestination-java.util.UUID-java.lang.String-java.lang.String-java.lang.String-java.util.Map-">
                                        DataObject.filterDestination()</a>. User IDs are also used by the framework to prevent data routing from applications that have an attached user ID to applications that have a different ID. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>bufferfile</code></td>
                                <td class="colLast">If used, specifies a file pathname for buffering output lines that cannot be sent over the communication line due to congestion. Without this parameter, lines that cannot be sent will be lost.</td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="block">
                        <p>&nbsp;</p>
                        <p><a id="ServerConnection"></a>Configuration of network connection servers, defined by <code>
                                producer&nbsp;server&#8209;<em>n</em></code> or <code>consumer&nbsp;server&#8209;<em>n</em></code> properties, requires a 
                            <a href="#ParameterList">parameter list</a> as  defined in the following table. There are two types of parameters. Those of the first type define the  server transport mechanism. These include <code>class</code>, <code>port</code> and <code>websocket</code>. The other parameters assign general features to the defined server and pertain to every transport.</p>
                        <p>With respect to the server transport mechanism, this can be custom, implemented as a plugin, or predefined. The <code>class</code> parameter defines a custom plugin, which may use custom parameters in addition to the parameters described in the table. If the <code>class</code> parameter is not used then the other parameters mentioned above determine a predefined server type as described in the table.</p>
                        <p><a href="#ProduceConsume">See above</a> the comment about <em>producers</em> and <em>consumers</em>.</p>											  
                    </div>
                    <table class="memberSummary">
                        <caption>
                            <span>Network   Server Configuration</span>
                        </caption>
                        <tbody>
                            <tr>
                                <th class="colFirst">Parameter</th>
                                <th class="colLast">Value Description</th>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>class</code></td>
                                <td class="colLast">Fully qualified class name of a custom server plugin.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>port</code> </td>
                                <td class="colLast">The number of the port the server listens on. The use of this parameter without the <code>class</code> parameter defines a <a href="https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html">TCP/IP server socket</a>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>websocket</code></td>
                                <td class="colLast">Defines a WebSocket server. This parameter is a keyword that does not require a value assignment. At most two WebSocket servers can be defined for an application - one when the application acts as a <em>producer</em> to incoming connections (i.e. when this parameter is part of the value of a <span class="colFirst"><code>producer&nbsp;server&#8209;<em>n</em></code></span> property) and one when it acts as a <em>consumer</em> (when this parameter is part of the value of a <span class="colFirst"><code>consumer&nbsp;server&#8209;<em>n</em></code></span> property.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>compress</code></td>
                                <td class="colLast">If used, specifies how output lines sent over  connections accepted by this server shall be compressed. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no compression.<br>
                                        <code>zip</code> - physical compression using <em>GZIP</em>. <br>
                                        <code>logical</code> - object-based compression. <br>
                                        <code>full</code> -
                                        both physical and logical compression (the default).
                                    </div> 
                                    <div class="spaceit">For a full explanation of the compression options see <a href="compression.html">Spiderwiz Data Compression</a>. </div>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="loginputServerParam"></a><code>loginput</code></td>
                                <td class="colLast">If used, overrides the general <a href="#logInput"><code>loginput</code> property</a> to specify server-specific logging options for  input lines received from connections accepted by this server. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no logging of input lines.<br>
                                        <code>raw</code> - input lines are logged as they are, i.e. with the objects compressed.<br>
                                        <code>full</code> - input lines are expanded to show uncompressed objects.<br>
                                        <code>verbose</code> - every line is logged twice - raw and full. </div>
                                    For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="logoutputServerParam"></a><code>logoutput</code></td>
                                <td class="colLast">If used, overrides the general <a href="#logOutput"><code>logoutput</code> property</a> to specify server-specific logging options for output lines sent over connections accepted by this server. The value can be any of the following:
                                    <div class="indent"><code>no</code> (or anything that starts with it) - no logging of output lines.<br>
                                        <code>raw</code> - output lines are logged as they are, i.e. with the objects compressed.<br>
                                        <code>full</code> - output lines are logged before compression to show uncompressed objects.<br>
                                        <code>verbose</code> - every line is logged twice - raw and full. </div>
                                    For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                              <td class="colFirst"><code>flushlogs</code></td>
                              <td class="colLast">If specified (no assignment is needed), indicates that the files that logs the activity of connections established on this server shall be flushed on each transaction. Very useful for debugging, but should be used with care since it slows performance down dramatically.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>gateway</code></td>
                                <td class="colLast">Normally an application connected to a <em>Spiderwiz network </em>would
                                    manifest its own remote address (used in methods such as
                                    <a href="../../../../org/spiderwiz/core/DataObject.html#filterDestination-java.util.UUID-java.lang.String-java.lang.String-java.lang.String-java.util.Map-">
                                        DataObject.filterDestination()</a>).
                                    However there are cases that this is unwanted, for instance if the manifested value is a local area network address. The use of the <code>gateway</code> keyword specifies that the remote address of an application connected through this server is the address that the server identifies and not the address that
                                    the application manifests.</td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="block">
                        <p>&nbsp;</p>
                        <p><a id="ImportConnection"></a>Configuration of import connections, defined by <code>import&#8209;<em>n</em></code>, requires a <a href="#ParameterList">parameter list</a> as defined in the following table. There are two types of parameters. Those of the first type define the transport mechanism. These include <code>class</code>, <code>ip</code>, <code>port</code>, <code>infile</code> and <code>outfile</code>. The other parameters assign general features to the defined connection and pertain to every transport.</p>
                        <p>With respect to the transport mechanism, this can be custom, implemented as a plugin, or predefined. The <code>class</code> parameter defines a custom plugin, which may use custom parameters in addition to the parameters described in the table. If the <code>class</code> parameter is not used then the other parameters mentioned above determine a predefined transport as described in the table.</p>
                    </div>
                    <table class="memberSummary">
                        <caption>
                            <span>Import Connection Configuration</span>
                        </caption>
                        <tbody>
                            <tr>
                                <th class="colFirst">Parameter</th>
                                <th class="colLast">Value Description</th>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>class</code></td>
                                <td class="colLast">Fully qualified class name of a custom connection plugin.</td>
                            </tr>
                            <tr>
                                <td class="colFirst" style="height: 42px"><code>ip</code></td>
                                <td class="colLast" style="height: 42px">The IP address or host name of the target server. The use of both <code>ip</code> and <code>port</code> properties defines a <a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html">TCP/IP socket</a> connection.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>port</code> </td>
                                <td class="colLast">Port number of the target server. The use of both <code>ip</code> and <code>port</code> properties defines a <a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html">TCP/IP socket</a> connection.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>infile</code></td>
                                <td class="colLast">Input file pathname of a <i>file channel</i>, when the connection is configured to read from and write to disk files. Usually when you use this property you would also use <code>outfile</code>. This is used mostly for debugging, when you would use logs of a previous application session to extract input for offline debugging.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>outfile</code></td>
                                <td class="colLast">Output file pathname of a <i>file channel</i>, when the connection is configured to read from and write to disk files. Usually when you use this property you would also use <code>infile</code>.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><a  id="importName"></a><code>name</code></td>
                                <td class="colLast">Identifies the connection by a unique name. The value assigned by this
                                    parameter can be retrieved by calling
                                    <a href="../../../../org/spiderwiz/core/ImportHandler.html#getName--">
                                        ImportHandler.getName()</a>.
                                </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>charset</code></td>
                                <td class="colLast">Specifies the character set to use when reading and writing text data from and to the channel. The default is UTF-8.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>loginput</code></td>
                                <td class="colLast">If the keyword exists, it specifies that all lines arriving over the connection shall be logged. For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>logoutput</code></td>
                                <td class="colLast">If the keyword exists, it specifies that  all lines output to the connection shall be logged. For a detailed description of the framework's logging system see <a href="logging.html">Spiderwiz Logging System</a>. </td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>alert</code></td>
                                <td class="colLast">If the keyword exists, it instructs the framework to <a href="../../../../org/spiderwiz/core/Main.html#sendNotificationMail-java.lang.String-java.lang.String-org.spiderwiz.zutils.ZDate-boolean-"> send an alert message</a> when the connection drops or becomes idle for a specific amount of time (as specified by configuration properties <a href="#DisconnectionAlert">described above</a>).
                            </tr>
                        </tbody>
                    </table>
                    <div class="block">
                        <p>&nbsp;</p>
                        <p><a id="MailSystem"></a>The configuration of the mail system defined by <span class="colFirst"><code>mail&nbsp;system</code></span> property requires a <a href="#ParameterList">parameter list</a>. The <code>class</code> parameter defines a custom mail plugin, and this may use custom parameters different than those described in the following table.
                            If the <code>class</code> parameter is not used then this property, if exists, defines an SMTP server and specifies its properties as described in the table. </p>
                    </div>
                    <table class="memberSummary">
                        <caption>
                            <span>Mail System Configuration</span>
                        </caption>
                        <tbody>
                            <tr>
                                <th class="colFirst">Parameter</th>
                                <th class="colLast">Value Description</th>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>class</code></td>
                                <td class="colLast">Fully qualified class name of a custom mail system plugin.</td>
                            </tr>
                            <tr>
                                <td class="colFirst"><code>server</code></td>
                                <td class="colLast">SMTP server address.
                            </tr>
                            <tr>
                                <td class="colFirst"><code>port</code></td>
                                <td class="colLast">Server port to use. 
                            </tr>
                            <tr>
                                <td class="colFirst"><code>ssl</code></td>
                                <td class="colLast">The keyword, if exists, specifies the use of SSL protocol. 
                            </tr>
                            <tr>
                                <td class="colFirst"><code>tls</code></td>
                                <td class="colLast">The keyword, if exists, specifies the use of TLS protocol. 
                            </tr>
                            <tr>
                                <td class="colFirst"><code>user</code></td>
                                <td class="colLast">The username to use for logging into the mail server. 
                            </tr>
                            <tr>
                                <td class="colFirst"><code>pwd</code></td>
                                <td class="colLast">The password to use for logging into the mail server.                                                 
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </body>
</html>
